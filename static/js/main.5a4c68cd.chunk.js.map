{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBar.js","components/CounterButton.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","console","log","map","val","i","components_Card","key","username","SearchBar","searchChange","aria-label","type","placeholder","onChange","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","updateCount","bind","assertThisInitialized","nextProps","nexState","setState","color","onClick","Component","Header","components_CounterButton","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","error","info","App","onRequestRobots","_this$props","searchInput","onSearchChange","filteredRobots","isPending","filter","robot","toLowerCase","includes","components_Header","components_SearchBar","components_Scroll","length","components_ErrorBoundry","Cardlist","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5a4c68cd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = props => {\r\n  const { name, email, id } = props;\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pas3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/set_set3/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n  console.log('Cardlist')\r\n  return (\r\n    robots.map((val, i) => {\r\n        return (\r\n          <Card\r\n            key={val.id}\r\n            id={val.id}\r\n            name={val.name}\r\n            email={val.email}\r\n            username={val.username}\r\n          />\r\n        );\r\n      })\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBar = (props) => {\r\n    const {searchChange} = props;\r\n    console.log('Searchbar')\r\n  return (\r\n      <div className='pa2'> \r\n          <input \r\n          aria-label='Search Robots'\r\n          className = 'pa3 ba b--green bg-lightest-blue' \r\n          type=\"search\" \r\n          placeholder=\"seach robots\" \r\n          onChange= {searchChange}/>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, {Component}from 'react';\r\n\r\n\r\nclass CounterButton extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            count: 0\r\n        }\r\n        this.updateCount = this.updateCount.bind(this);\r\n    }\r\n    shouldComponentUpdate(nextProps, nexState){\r\n        return true;\r\n    }   \r\n\r\n    updateCount(){\r\n        \r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n    render(){\r\n        console.log('Header')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount} >\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component}from 'react';\r\nimport Counter from './CounterButton'\r\n\r\n\r\nclass Header extends Component{\r\n    shouldComponentUpdate(nextProps, nexState){\r\n        return false;\r\n    }\r\n    render(){\r\n        console.log('Header')\r\n        return <div>\r\n            <h1 className=\"f1\">Robo Friends</h1>\r\n            <Counter />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY: 'scroll', border: '2px solid black', height: '800px'}}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        const { hasError } = this.state;\r\n\r\n        if(hasError){\r\n            return <h1>Ooops. Something went wrong.</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/Cardlist\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport Header from \"../components/Header\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchInput: state.searchRobots.searchInput,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  /*constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      robots: []\r\n      searchInput: \"\"\r\n};\r\n\r\n    // this.onSearchChange = this.onSearchChange.bind(this);\r\n  }*/\r\n\r\n  componentDidMount() {\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then(response => response.json())\r\n    //   .then(users => this.setState({ robots: users }));\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  /*onSearchChange(event) {\r\n    this.setState({ searchInput: event.target.value });\r\n  }*/\r\n\r\n  render() {\r\n    // const { robots } = this.state;\r\n    const { searchInput, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchInput.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBar searchChange={onSearchChange} />\r\n        <Scroll>\r\n          {!robots.length ? (\r\n            <h1>Loading...</h1>\r\n          ) : (\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          )}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        // console.log(`data`, data);\r\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\r\n    })\r\n    .catch(error => {\r\n        console.log(`error`, error)\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\r\n    });\r\n};\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchInput: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n       return Object.assign({}, state, {searchInput: action.payload})\r\n      // return { ...state, searchTextField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: true,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state  , {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk';\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}